#!/usr/bin/env python3

import utm
import cv2
import png
import pyqrcode
import numpy as np
from cv_bridge import CvBridge

import rospy
from ros_numpy import numpify
from tf2_ros import Buffer, TransformListener
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image


class RVIZ2QR:
	def __init__(self):
		self.utm_frame = rospy.get_param("~utm_frame", "utm")
		self.target_altitude = rospy.get_param("~target_altitude", 0.0)
		self.zone_number = rospy.get_param("~zone_number", 33)
		self.zone_letter = rospy.get_param("~zone_letter", 'U')

		self.tf = Buffer()
		self.tf_sub = TransformListener(self.tf)
		self.qr = None
		self.qr_name = "qr.png"

		self.nav_pose_sub = rospy.Subscriber("goal", PoseStamped, self.create_qr_cb)

		self.qr_pub = rospy.Publisher("qr_code", Image, queue_size=1)

	def create_qr_cb(self, msg):
		""" Create and publish QR code given PoseStamped message """
		self.local_frame = msg.header.frame_id
		# get transformation matrix between frames
		transform = self.tf.lookup_transform(self.utm_frame, self.local_frame, rospy.Time(0), rospy.Duration(60))
		transform = numpify(transform.transform)
		# get goal position
		goal = np.array([msg.pose.position.x, msg.pose.position.y, self.target_altitude])
		# transform goal coords and publish created qr code
		geo = self.transform_to_latlon(transform, goal)
		self.qr = self.create_qr(geo)
		self.qr.png(self.qr_name, scale=8)
		self.publish_qr()

	def transform_to_latlon(self, transform, point):
		""" Transform point from local frame to latitute and longitude """
		assert transform.shape == (4, 4)
		assert len(point) == 3
		target_point = np.dot(transform, np.hstack([point, 1]))[:3]
		target_point[2] = self.target_altitude
		geo = utm.to_latlon(target_point[0], target_point[1], self.zone_number, self.zone_letter)
		return geo

	def create_qr(self, geo):
		""" Create QR with geo coordinates """
		geo_str = f"geo:{geo[0]},{geo[1]}"
		return pyqrcode.create(geo_str)
	
	def publish_qr(self):
		""" Publish QR code using cv_bridge """
		img = cv2.imread(self.qr_name)
		bridge = CvBridge()
		img_msg = bridge.cv2_to_imgmsg(img, encoding="passthrough")
		self.qr_pub.publish(img_msg)
		

def main():
	rospy.init_node("rviz2qr")
	goal2qr = RVIZ2QR()
	rospy.spin()

if __name__ == "__main__":
	main()