#!/usr/bin/env python3

import utm
import png
import pyqrcode
import numpy as np

import rospy
from tf2_ros import Buffer
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import CompressedImage


class RVIZ2QR:
	def __init__(self):
		self.utm_frame = rospy.get_param('~utm_frame', 'utm')
		self.local_frame = rospy.get_param('~local_frame', 'map')
		self.target_altitude = rospy.get_param('~target_altitude', 0.0)
		self.zone = 33
		self.hemisphere = 'U'

		self.tf = Buffer()
		self.qr = None

		self.nav_pose_sub = rospy.Subscriber('goal', PoseStamped, self.create_qr_cb)

		self.qr_pub = rospy.Publisher('qr_code', CompressedImage, queue_size=1)
	
	def create_qr_cb(self, msg):
		""" Create and publish QR code given PoseStamped message """
		self.local_frame = msg.header.frame_id
		transform = self.tf.lookup_transform(self.local_frame, self.utm_frame, rospy.Time(0), rospy.Duration(60))
		goal = np.array([msg.pose.position.x, msg.pose.position.y, self.target_altitude])
		geo = self.transform_to_latlon(transform, goal)
		self.qr = self.create_qr(geo)
		self.qr_pub.publish(self.qr)

	def transform_to_latlon(self, transform, point):
		""" Transform point from local frame to latitute and longitude """
		point = np.dot(transform[:3, :3], point) + transform[:3, 3:]
		geo = utm.to_latlon(point[0], point[1], self.zone, self.hemisphere)
		return geo

	def create_qr(self, geo):
		"""	Create QR with geo coordinates """
		geo_str = f"geo:{geo[0]},{geo[1]}"
		return pyqrcode.create(geo_str)
		

def main():
	rospy.init_node('rviz2qr')
	goal2qr = RVIZ2QR()
	rospy.spin()

if __name__ == '__main__':
	main()